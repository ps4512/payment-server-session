{"version":3,"file":"http.js","names":["_nodeFetch","_interopRequireDefault","require","_axios","_config","obj","__esModule","default","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","value","_toPropertyKey","configurable","writable","arg","_toPrimitive","String","input","hint","prim","Symbol","toPrimitive","undefined","res","call","TypeError","Number","asyncGeneratorStep","gen","resolve","reject","_next","_throw","info","error","done","Promise","then","_asyncToGenerator","fn","self","args","err","pjson","buildResponse","config","response","csv","buildCsvResponse","buildJsonResponse","_x","_buildCsvResponse","txt","text","Buffer","from","status","data","JSON","parse","headers","getResponseHeaders","json","getRequestHeaders","request","authHeader","idempotencyKey","Authorization","pragma","version","formData","REQUEST_ID_HEADER","raw","requestId","API_VERSION_HEADER","getResponseAxiosHeaders","buildAxiosResponse","bodyParser","rsp","isTokenExpired","tokenExpiry","currentTimestamp","createAccessToken","exports","_ref","httpClient","body","requestBody","grant_type","client_id","client","client_secret","secret","scope","join","access","axios","url","host","includes","SANDBOX_ACCESS_URL","LIVE_ACCESS_URL","method","Accept","URLSearchParams","timeout","httpsAgent","agent","catch","toJSON","message","fetch","ok","_x2","_x3","_x4","httpRequest","_ref2","path","auth","expires","Date","type","token","token_type","access_token","getTime","expires_in","stringify","_x5","_x6","_x7","_x8","_x9","_x10","_x11","get","_ref3","_x12","_x13","_x14","_x15","post","_ref4","_x16","_x17","_x18","_x19","_x20","_x21","patch","_ref5","_x22","_x23","_x24","_x25","_x26","put","_ref6","_x27","_x28","_x29","_x30","_x31","_delete","_ref7","_x32","_x33","_x34","_x35","_default"],"sources":["../../src/services/http.js"],"sourcesContent":["/* eslint-disable no-throw-literal */\r\nimport fetch from 'node-fetch';\r\nimport axios from 'axios';\r\nimport {\r\n    API_VERSION_HEADER,\r\n    LIVE_ACCESS_URL,\r\n    REQUEST_ID_HEADER,\r\n    SANDBOX_ACCESS_URL,\r\n} from '../config';\r\n\r\nconst pjson = require('../../package.json');\r\n\r\nfunction buildResponse(config, response) {\r\n    if (config.csv) {\r\n        return buildCsvResponse(response);\r\n    }\r\n\r\n    return buildJsonResponse(response);\r\n}\r\n\r\nasync function buildCsvResponse(response) {\r\n    const txt = await response.text();\r\n\r\n    const csv = Buffer.from(txt);\r\n\r\n    return {\r\n        status: response.status,\r\n        csv,\r\n    };\r\n}\r\n\r\nfunction buildJsonResponse(response) {\r\n    return response.text().then((text) => {\r\n        const data = !text ? {} : JSON.parse(text);\r\n        const headers = getResponseHeaders(response);\r\n\r\n        return {\r\n            status: response.status,\r\n            json: data,\r\n            headers,\r\n        };\r\n    });\r\n}\r\n\r\nfunction getRequestHeaders(config, request, authHeader, idempotencyKey) {\r\n    let headers = {\r\n        ...config.headers,\r\n        Authorization: authHeader,\r\n        'Cache-Control': 'no-cache',\r\n        pragma: 'no-cache',\r\n        'user-agent': `checkout-sdk-node/${pjson.version}`,\r\n    };\r\n\r\n    if (request && request.headers) {\r\n        headers = { ...headers, ...request.headers };\r\n    }\r\n\r\n    if (!config.formData) {\r\n        headers['Content-Type'] = config.csv ? 'text/csv' : 'application/json';\r\n    }\r\n\r\n    if (idempotencyKey !== undefined) {\r\n        headers['Cko-Idempotency-Key'] = idempotencyKey;\r\n    }\r\n\r\n    return headers;\r\n}\r\n\r\nfunction getResponseHeaders(response) {\r\n    // Return CKO response headers when available\r\n\r\n    if (REQUEST_ID_HEADER in response.headers.raw()) {\r\n        const requestId =\r\n            response.headers.raw()[REQUEST_ID_HEADER] || response.headers.raw()['request-id'];\r\n        const version =\r\n            response.headers.raw()[API_VERSION_HEADER] || response.headers.raw().version;\r\n        return {\r\n            'cko-request-id': requestId ? requestId[0] : '',\r\n            'cko-version': version ? version[0] : '',\r\n        };\r\n    }\r\n\r\n    return {};\r\n}\r\n\r\nfunction getResponseAxiosHeaders(response) {\r\n    // Return CKO response headers when available\r\n\r\n    if (REQUEST_ID_HEADER in response.headers) {\r\n        const requestId =\r\n            response.headers[REQUEST_ID_HEADER] || response.headers['request-id'];\r\n        const version =\r\n            response.headers[API_VERSION_HEADER] || response.headers.version;\r\n        return {\r\n            'cko-request-id': requestId ? requestId[0] : '',\r\n            'cko-version': version ? version[0] : '',\r\n        };\r\n    }\r\n\r\n    return {};\r\n}\r\n\r\nfunction buildAxiosResponse(config, response) {\r\n    if (config.csv) {\r\n        return {\r\n            status: response.status,\r\n            csv: Buffer.from(response.data),\r\n        };\r\n    }\r\n    return {\r\n        status: response.status,\r\n        json: response.data,\r\n        headers: getResponseAxiosHeaders(response),\r\n    };\r\n}\r\n\r\n// For 'no body' response, replace with empty object\r\nconst bodyParser = (rsp) => rsp.text().then((text) => (text ? JSON.parse(text) : {}));\r\n\r\nconst isTokenExpired = (tokenExpiry, currentTimestamp) => tokenExpiry < currentTimestamp;\r\n\r\nexport const createAccessToken = async (config, httpClient, body) => {\r\n    const requestBody = body || {\r\n        grant_type: 'client_credentials',\r\n        client_id: config.client,\r\n        client_secret: config.secret,\r\n        scope: config.scope.join(' '),\r\n    };\r\n\r\n    let access;\r\n\r\n    switch (httpClient) {\r\n        case 'axios':\r\n            access = await axios({\r\n                url: config.host.includes('sandbox') ? SANDBOX_ACCESS_URL : LIVE_ACCESS_URL,\r\n                method: 'post',\r\n                headers: {\r\n                    'Content-Type': 'application/x-www-form-urlencoded',\r\n                    Accept: 'application/json',\r\n                },\r\n                data: new URLSearchParams(requestBody),\r\n                timeout: config.timeout,\r\n                httpsAgent: config.agent,\r\n            })\r\n                .catch((error) => {\r\n                    if (error.response) {\r\n                        throw {\r\n                            status: error.response.status,\r\n                            json: error.toJSON(),\r\n                        };\r\n                    } else if (error.request) {\r\n                        throw {\r\n                            request: error.request,\r\n                            json: error.toJSON(),\r\n                        };\r\n                    } else {\r\n                        throw {\r\n                            message: error.message,\r\n                            json: error.toJSON(),\r\n                        };\r\n                    }\r\n                })\r\n                .then((response) => ({\r\n                    status: response.status,\r\n                    json: response.data,\r\n                }));\r\n            return access;\r\n\r\n        default:\r\n            access = await fetch(\r\n                config.host.includes('sandbox') ? SANDBOX_ACCESS_URL : LIVE_ACCESS_URL,\r\n                {\r\n                    method: 'post',\r\n                    timeout: config.timeout,\r\n                    agent: config.agent,\r\n                    body: new URLSearchParams(requestBody),\r\n                    headers: {\r\n                        'Content-Type': 'application/x-www-form-urlencoded',\r\n                        Accept: 'application/json',\r\n                    },\r\n                }\r\n            );\r\n            if (!access.ok) {\r\n                const json = bodyParser(access);\r\n                throw { status: access.status, json };\r\n            }\r\n\r\n            return access.text().then((text) => {\r\n                const data = text ? JSON.parse(text) : {};\r\n                return {\r\n                    status: access.status,\r\n                    json: data,\r\n                };\r\n            });\r\n    }\r\n};\r\n\r\n// eslint-disable-next-line consistent-return\r\nconst httpRequest = async (httpClient, method, path, config, auth, request, idempotencyKey) => {\r\n    let authHeader = null;\r\n\r\n    if (auth) {\r\n        authHeader = auth;\r\n    } else if (config.client) {\r\n        // TODO Refactor OAuth credentials request\r\n\r\n        // For NAS\r\n        // If an access tokens exists, and it's not expired re-use it\r\n        if (config.access && !isTokenExpired(config.access.expires, new Date())) {\r\n            authHeader = `${config.access.type} ${config.access.token}`;\r\n        } else {\r\n            const access = await createAccessToken(config, httpClient);\r\n            authHeader = `${access.json.token_type} ${access.json.access_token}`;\r\n\r\n            // eslint-disable-next-line no-param-reassign\r\n            config.access = {\r\n                token: access.json.access_token,\r\n                type: access.json.token_type,\r\n                scope: access.json.scope,\r\n                expires: new Date(new Date().getTime() + access.json.expires_in),\r\n            };\r\n        }\r\n    }\r\n\r\n    const headers = getRequestHeaders(config, request, authHeader, idempotencyKey);\r\n\r\n    let response;\r\n\r\n    switch (httpClient) {\r\n        case 'axios':\r\n            response = await axios({\r\n                url: path,\r\n                method,\r\n                headers,\r\n                data: config.formData ? request : JSON.stringify(request),\r\n                timeout: config.timeout,\r\n                httpsAgent: config.agent,\r\n            })\r\n                .catch((error) => {\r\n                    if (error.response) {\r\n                        throw {\r\n                            status: error.response.status,\r\n                            json: error.toJSON(),\r\n                        };\r\n                    } else if (error.request) {\r\n                        throw {\r\n                            request: error.request,\r\n                            json: error.toJSON(),\r\n                        };\r\n                    } else {\r\n                        throw {\r\n                            message: error.message,\r\n                            json: error.toJSON(),\r\n                        };\r\n                    }\r\n                })\r\n                .then((res) => buildAxiosResponse(config, res));\r\n            return response;\r\n\r\n        default:\r\n            response = await fetch(path, {\r\n                method,\r\n                timeout: config.timeout,\r\n                agent: config.agent,\r\n                body: config.formData ? request : JSON.stringify(request),\r\n                headers,\r\n            });\r\n\r\n            if (!response.ok) {\r\n                const json = bodyParser(response);\r\n                throw { status: response.status, json };\r\n            }\r\n\r\n            return buildResponse(config, response);\r\n    }\r\n};\r\n\r\nexport const get = async (httpClient, path, config, auth) =>\r\n    httpRequest(httpClient, 'get', path, config, auth);\r\n\r\nexport const post = async (httpClient, path, config, auth, request, idempotencyKey) =>\r\n    httpRequest(httpClient, 'post', path, config, auth, request, idempotencyKey);\r\n\r\nexport const patch = async (httpClient, path, config, auth, request) =>\r\n    httpRequest(httpClient, 'patch', path, config, auth, request);\r\n\r\nexport const put = async (httpClient, path, config, auth, request) =>\r\n    httpRequest(httpClient, 'put', path, config, auth, request);\r\n\r\nexport const _delete = async (httpClient, path, config, auth) =>\r\n    httpRequest(httpClient, 'delete', path, config, auth);\r\n\r\nexport default createAccessToken;\r\n"],"mappings":"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"}