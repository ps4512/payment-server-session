"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _errors = require("../../services/errors");
var _http = require("../../services/http");
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
/**
 * Create and manage the webhook notifications you receive to keep up to date with
 * the status of your transactions.
 *
 * @export
 * @class Webhooks
 */
class Webhooks {
  constructor(config) {
    this.config = config;
  }

  /**
   * Retrieves the webhooks configured for the channel identified by your API key
   *
   * @memberof Webhooks
   * @return {Promise<Object>} A promise to the request webhooks response.
   */
  retrieveWebhooks() {
    var _this = this;
    return _asyncToGenerator(function* () {
      try {
        const response = yield (0, _http.get)(_this.config.httpClient, `${_this.config.host}/webhooks`, _this.config, _this.config.sk);
        return yield response.json;
      } catch (err) {
        const error = yield (0, _errors.determineError)(err);
        throw error;
      }
    })();
  }

  /**
   * Register a new webhook endpoint that Checkout.com will post all or selected events to
   *
   * @memberof Webhooks
   * @return {Promise<Object>} A promise to the register webhook response.
   */
  registerWebhook(body) {
    var _this2 = this;
    return _asyncToGenerator(function* () {
      try {
        const response = yield (0, _http.post)(_this2.config.httpClient, `${_this2.config.host}/webhooks`, _this2.config, _this2.config.sk, body);
        return yield response.json;
      } catch (err) {
        const error = yield (0, _errors.determineError)(err);
        throw error;
      }
    })();
  }

  /**
   * Retrieves the webhook with the specified identifier string
   *
   * @memberof Webhooks
   * @return {Promise<Object>} A promise to the retrieve webhook response.
   */
  retrieveWebhook(id) {
    var _this3 = this;
    return _asyncToGenerator(function* () {
      try {
        const response = yield (0, _http.get)(_this3.config.httpClient, `${_this3.config.host}/webhooks/${id}`, _this3.config, _this3.config.sk);
        return yield response.json;
      } catch (err) {
        const error = yield (0, _errors.determineError)(err);
        throw error;
      }
    })();
  }

  /**
   * Updates an existing webhook
   *
   * @memberof Webhooks
   * @return {Promise<Object>} A promise to the update webhook response.
   */
  updateWebhook(id, body) {
    var _this4 = this;
    return _asyncToGenerator(function* () {
      try {
        const response = yield (0, _http.put)(_this4.config.httpClient, `${_this4.config.host}/webhooks/${id}`, _this4.config, _this4.config.sk, body);
        return yield response.json;
      } catch (err) {
        const error = yield (0, _errors.determineError)(err);
        throw error;
      }
    })();
  }

  /**
   * Updates all or some of the registered webhook details
   *
   * @memberof Webhooks
   * @return {Promise<Object>} A promise to the update webhook response.
   */
  partiallyUpdateWebhook(id, body) {
    var _this5 = this;
    return _asyncToGenerator(function* () {
      try {
        const response = yield (0, _http.patch)(_this5.config.httpClient, `${_this5.config.host}/webhooks/${id}`, _this5.config, _this5.config.sk, body);
        return yield response.json;
      } catch (err) {
        const error = yield (0, _errors.determineError)(err);
        throw error;
      }
    })();
  }

  /**
   * Removes an existing webhook
   *
   * @memberof Webhooks
   * @return {Promise<Object>} A promise to the remove webhook response.
   */
  removeWebhook(id) {
    var _this6 = this;
    return _asyncToGenerator(function* () {
      try {
        const response = yield (0, _http._delete)(_this6.config.httpClient, `${_this6.config.host}/webhooks/${id}`, _this6.config, _this6.config.sk);
        return yield response.json;
      } catch (err) {
        const error = yield (0, _errors.determineError)(err);
        throw error;
      }
    })();
  }
}
exports.default = Webhooks;
//# sourceMappingURL=webhooks.js.map