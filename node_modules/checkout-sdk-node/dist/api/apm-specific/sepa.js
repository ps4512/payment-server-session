"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _errors = require("../../services/errors");
var _http = require("../../services/http");
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
/**
 * Class dealing with the /sepa and /ppro/sepa endpoint
 *
 * @export
 * @class Sepa
 */
class Sepa {
  constructor(config) {
    this.config = config;
  }

  /**
   * Get mandate
   *
   * @param {string} id Source id
   * @return {Promise<Object>} A promise to the Sepa response.
   */
  getMandate(id) {
    var _this = this;
    return _asyncToGenerator(function* () {
      const url = _this.config.host.includes('sandbox') ? `${_this.config.host}/sepa-external/mandates/${id}` : `${_this.config.host}/sepa/mandates/${id}`;
      try {
        const response = yield (0, _http.get)(_this.config.httpClient, url, _this.config, _this.config.sk);
        return yield response.json;
      } catch (err) {
        const error = yield (0, _errors.determineError)(err);
        throw error;
      }
    })();
  }

  /**
   * Cancel mandate
   *
   * @param {string} id Source id
   * @return {Promise<Object>} A promise to the Sepa response.
   */
  cancelMandate(id) {
    var _this2 = this;
    return _asyncToGenerator(function* () {
      const url = _this2.config.host.includes('sandbox') ? `${_this2.config.host}/sepa-external/mandates/${id}/cancel` : `${_this2.config.host}/sepa/mandates/${id}/cancel`;
      try {
        const response = yield (0, _http.post)(_this2.config.httpClient, url, _this2.config, _this2.config.sk);
        return yield response.json;
      } catch (err) {
        const error = yield (0, _errors.determineError)(err);
        throw error;
      }
    })();
  }

  /**
   * Get mandate via PPRO
   *
   * @param {string} id Source id
   * @return {Promise<Object>} A promise to the Sepa response.
   */
  getPPROMandate(id) {
    var _this3 = this;
    return _asyncToGenerator(function* () {
      const url = _this3.config.host.includes('sandbox') ? `${_this3.config.host}/ppro/sepa-external/mandates/${id}` : `${_this3.config.host}/ppro/sepa/mandates/${id}`;
      try {
        const response = yield (0, _http.get)(_this3.config.httpClient, url, _this3.config, _this3.config.sk);
        return yield response.json;
      } catch (err) {
        const error = yield (0, _errors.determineError)(err);
        throw error;
      }
    })();
  }

  /**
   * Cancel mandate via PPRO
   *
   * @param {string} id Source id
   * @return {Promise<Object>} A promise to the Sepa response.
   */
  cancelPPROMandate(id) {
    var _this4 = this;
    return _asyncToGenerator(function* () {
      const url = _this4.config.host.includes('sandbox') ? `${_this4.config.host}/ppro/sepa-external/mandates/${id}/cancel` : `${_this4.config.host}/ppro/sepa/mandates/${id}/cancel`;
      try {
        const response = yield (0, _http.post)(_this4.config.httpClient, url, _this4.config, _this4.config.sk);
        return yield response.json;
      } catch (err) {
        const error = yield (0, _errors.determineError)(err);
        throw error;
      }
    })();
  }
}
exports.default = Sepa;
//# sourceMappingURL=sepa.js.map