{"version":3,"file":"disputes.js","names":["_errors","require","_http","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","done","Promise","then","_asyncToGenerator","fn","self","args","arguments","apply","err","undefined","Disputes","constructor","config","get","body","_this","url","host","queryString","Object","keys","map","join","response","httpClient","sk","json","determineError","getDetails","disputeId","_this2","accept","_this3","post","provideEvidence","_this4","put","getEvidence","_this5","submit","_this6","getCompiledSubmittedEvidence","_this7","getDisputeSchemeFiles","_this8","exports","default"],"sources":["../../../src/api/disputes/disputes.js"],"sourcesContent":["import { determineError } from '../../services/errors';\r\nimport { get, post, put } from '../../services/http';\r\n\r\n/**\r\n * Class dealing with the /disputes endpoint\r\n *\r\n * @export\r\n * @class Disputes\r\n */\r\nexport default class Disputes {\r\n    constructor(config) {\r\n        this.config = config;\r\n    }\r\n\r\n    /**\r\n     * Returns a list of all disputes against your business. The results will be returned\r\n     * in reverse chronological order, showing the last modified dispute (for example,\r\n     * where you've recently added a piece of evidence) first. You can use the optional\r\n     * parameters below to skip or limit results.\r\n     *\r\n     * @memberof Disputes\r\n     * @param {Object} body Disputes params.\r\n     * @return {Promise<Object>} A promise to the disputes response.\r\n     */\r\n    async get(body) {\r\n        try {\r\n            let url = `${this.config.host}/disputes`;\r\n\r\n            if (body) {\r\n                const queryString = Object.keys(body)\r\n                    .map((key) => `${key}=${body[key]}`)\r\n                    .join('&');\r\n                url += `?${queryString}`;\r\n            }\r\n            const response = await get(\r\n                this.config.httpClient,\r\n                url,\r\n                this.config,\r\n                this.config.sk\r\n            );\r\n            return await response.json;\r\n        } catch (err) {\r\n            const error = await determineError(err);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns all the details of a dispute using the dispute identifier.\r\n     *\r\n     * @memberof Disputes\r\n     * @param {string} disputeId Dispute id.\r\n     * @return {Promise<Object>} A promise to the dispute response.\r\n     */\r\n    async getDetails(disputeId) {\r\n        try {\r\n            const response = await get(\r\n                this.config.httpClient,\r\n                `${this.config.host}/disputes/${disputeId}`,\r\n                this.config,\r\n                this.config.sk\r\n            );\r\n            return await response.json;\r\n        } catch (err) {\r\n            const error = await determineError(err);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns all the details of a dispute using the dispute identifier.\r\n     *\r\n     * @memberof Disputes\r\n     * @param {string} disputeId Dispute id.\r\n     * @return {Promise<Object>} A promise to the dispute response.\r\n     */\r\n    async accept(disputeId) {\r\n        try {\r\n            const response = await post(\r\n                this.config.httpClient,\r\n                `${this.config.host}/disputes/${disputeId}/accept`,\r\n                this.config,\r\n                this.config.sk\r\n            );\r\n            return await response.json;\r\n        } catch (err) {\r\n            const error = await determineError(err);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Adds supporting evidence to a dispute. Before using this endpoint, you first need\r\n     * to upload your files using the file uploader. You will receive a file id\r\n     * (prefixed by file_) which you can then use in your request. Note that this only\r\n     * attaches the evidence to the dispute, it does not send it to us.\r\n     * Once ready, you will need to submit it.\r\n     *\r\n     * You must provide at least one evidence type in the body of your request.\r\n     *\r\n     * @memberof Disputes\r\n     * @param {string} disputeId Dispute id.\r\n     * @param {Object} body Evidence\r\n     * @return {Promise<Object>} A promise to the dispute response.\r\n     */\r\n    async provideEvidence(disputeId, body) {\r\n        try {\r\n            const response = await put(\r\n                this.config.httpClient,\r\n                `${this.config.host}/disputes/${disputeId}/evidence`,\r\n                this.config,\r\n                this.config.sk,\r\n                body\r\n            );\r\n            return await response.json;\r\n        } catch (err) {\r\n            const error = await determineError(err);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Retrieves a list of the evidence submitted in response to a specific dispute.\r\n     *\r\n     * @memberof Disputes\r\n     * @param {string} disputeId Dispute id.\r\n     * @return {Promise<Object>} A promise to the dispute response.\r\n     */\r\n    async getEvidence(disputeId) {\r\n        try {\r\n            const response = await get(\r\n                this.config.httpClient,\r\n                `${this.config.host}/disputes/${disputeId}/evidence`,\r\n                this.config,\r\n                this.config.sk\r\n            );\r\n            return await response.json;\r\n        } catch (err) {\r\n            const error = await determineError(err);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * With this final request, you can submit the evidence that you have previously\r\n     * provided. Make sure you have provided all the relevant information before using\r\n     * this request. You will not be able to amend your evidence once you have submitted it.\r\n     *\r\n     * @memberof Disputes\r\n     * @param {string} disputeId Dispute id.\r\n     * @return {Promise<Object>} A promise to the dispute response.\r\n     */\r\n    async submit(disputeId) {\r\n        try {\r\n            const response = await post(\r\n                this.config.httpClient,\r\n                `${this.config.host}/disputes/${disputeId}/evidence`,\r\n                this.config,\r\n                this.config.sk\r\n            );\r\n            return await response.json;\r\n        } catch (err) {\r\n            const error = await determineError(err);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Retrieves the unique identifier of the PDF file containing all the evidence submitted to represent the dispute case.\r\n     * To retrieve the file's download link, call the GET /files/{file_id} endpoint with the returned file ID.\r\n     * Evidence submitted before February 2024 cannot be retrieved using this endpoint.\r\n     *\r\n     * @memberof Disputes\r\n     * @param {string} disputeId Dispute id.\r\n     * @return {Promise<Object>} A promise to the compiled submitted evidence response.\r\n     */\r\n    async getCompiledSubmittedEvidence(disputeId) {\r\n        try {\r\n            const response = await get(\r\n                this.config.httpClient,\r\n                `${this.config.host}/disputes/${disputeId}/evidence/submitted`,\r\n                this.config,\r\n                this.config.sk\r\n            );\r\n            return await response.json;\r\n        } catch (err) {\r\n            const error = await determineError(err);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns all of the scheme files of a dispute using the dispute identifier.\r\n     * Currently available only for VISA disputes.\r\n     *\r\n     * @memberof Disputes\r\n     * @param {string} disputeId Dispute id.\r\n     * @return {Promise<Object>} A promise to the dispute scheme files response.\r\n     */\r\n    async getDisputeSchemeFiles(disputeId) {\r\n        try {\r\n            const response = await get(\r\n                this.config.httpClient,\r\n                `${this.config.host}/disputes/${disputeId}/schemefiles`,\r\n                this.config,\r\n                this.config.sk\r\n            );\r\n            return await response.json;\r\n        } catch (err) {\r\n            const error = await determineError(err);\r\n            throw error;\r\n        }\r\n    }\r\n}\r\n"],"mappings":"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"}