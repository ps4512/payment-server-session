"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _errors = require("../../services/errors");
var _http = require("../../services/http");
var _validation = require("../../services/validation");
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
/**
 * Class dealing with the /tokens endpoint
 *
 * @export
 * @class Tokens
 */
class Tokens {
  constructor(config) {
    this.config = config;
  }

  /**
   * Exchange card details or a digital wallet payment token for a reference token
   * that can be used later to request a card payment.
   *
   * @memberof Tokens
   * @param {Object} body Token request body.
   * @return {Promise<Object>} A promise to the request token response.
   */
  request(body) {
    var _this = this;
    return _asyncToGenerator(function* () {
      (0, _validation.setTokenType)(body);
      try {
        const response = yield (0, _http.post)(_this.config.httpClient, `${_this.config.host}/tokens`, _this.config, _this.config.pk, body);
        return yield response.json;
      } catch (err) {
        const error = yield (0, _errors.determineError)(err);
        throw error;
      }
    })();
  }
}
exports.default = Tokens;
//# sourceMappingURL=tokens.js.map