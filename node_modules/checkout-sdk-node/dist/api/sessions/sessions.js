"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _errors = require("../../services/errors");
var _http = require("../../services/http");
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
/**
 * Class dealing with the /sessions endpoint
 *
 * @export
 * @class Sessions
 */
class Sessions {
  constructor(config) {
    this.config = config;
  }

  /**
   * Create a payment session to authenticate a cardholder before requesting a payment.
   *
   * @memberof Sessions
   * @param {Object} body Sessions request body.
   * @return {Promise<Object>} A promise to the sessions response.
   */
  request(body) {
    var _this = this;
    return _asyncToGenerator(function* () {
      try {
        const response = yield (0, _http.post)(_this.config.httpClient, `${_this.config.host}/sessions`, _this.config, _this.config.sk, body);
        return yield response.json;
      } catch (err) {
        const error = yield (0, _errors.determineError)(err);
        throw error;
      }
    })();
  }

  /**
   * Returns the details of the session with the specified identifier string.
   *
   * @memberof Sessions
   * @param {string} id Sessions id.
   * @param {string} channel Type of channnel.
   * @return {Promise<Object>} A promise to the sessions response.
   */
  get(id, channel) {
    var _this2 = this;
    return _asyncToGenerator(function* () {
      try {
        _this2.config.headers = _objectSpread(_objectSpread({}, _this2.config.headers), {}, {
          channel
        });
        const response = yield (0, _http.get)(_this2.config.httpClient, `${_this2.config.host}/sessions/${id}`, _this2.config, _this2.config.sk);
        return yield response.json;
      } catch (err) {
        const error = yield (0, _errors.determineError)(err);
        throw error;
      }
    })();
  }

  /**
   * Update a session by providing information about the environment.
   *
   * @memberof Sessions
   * @param {string} id Sessions id.
   * @param {Object} body Sessions request body.
   * @return {Promise<Object>} A promise to the sessions response.
   */
  update(id, body) {
    var _this3 = this;
    return _asyncToGenerator(function* () {
      try {
        const response = yield (0, _http.put)(_this3.config.httpClient, `${_this3.config.host}/sessions/${id}/collect-data`, _this3.config, _this3.config.sk, body);
        return yield response.json;
      } catch (err) {
        const error = yield (0, _errors.determineError)(err);
        throw error;
      }
    })();
  }

  /**
   * Completes a session by posting the the following request to the callback URL
   * (only relevant for non hosted sessions)
   *
   * @memberof Sessions
   * @param {string} id Sessions id.
   * @return {Promise<Object>} A promise to the sessions response.
   */
  complete(id) {
    var _this4 = this;
    return _asyncToGenerator(function* () {
      try {
        const response = yield (0, _http.post)(_this4.config.httpClient, `${_this4.config.host}/sessions/${id}/complete`, _this4.config, _this4.config.sk);
        return yield response.json;
      } catch (err) {
        const error = yield (0, _errors.determineError)(err);
        throw error;
      }
    })();
  }

  /**
   * Completes a session by posting the the following request to the callback URL
   * (only relevant for non hosted sessions)
   *
   * @memberof Sessions
   * @param {string} id Sessions id.
   * @param {string} threeDsMethodCompletion 3DS Method completion indicator
   * @return {Promise<Object>} A promise to the sessions response.
   */
  update3DSMethodCompletionIndicator(id, threeDsMethodCompletion) {
    var _this5 = this;
    return _asyncToGenerator(function* () {
      try {
        const body = {
          three_ds_method_completion: threeDsMethodCompletion
        };
        const response = yield (0, _http.put)(_this5.config.httpClient, `${_this5.config.host}/sessions/${id}/issuer-fingerprint`, _this5.config, _this5.config.sk, body);
        return yield response.json;
      } catch (err) {
        const error = yield (0, _errors.determineError)(err);
        throw error;
      }
    })();
  }
}
exports.default = Sessions;
//# sourceMappingURL=sessions.js.map