"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _errors = require("../../services/errors");
var _http = require("../../services/http");
var _formData = _interopRequireDefault(require("form-data"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
/**
 * Class dealing with the /files endpoint
 *
 * @export
 * @class Files
 */
class Files {
  constructor(config) {
    this.config = config;
  }

  /**
   * Upload a file to use as evidence in a dispute. Your file must be in either JPEG/JPG,
   * PNG or PDF format, and be no larger than 4MB.
   *
   * @memberof Files
   * @param {Object} body Files request body.
   * @return {Promise<Object>} A promise to the files response.
   */
  upload(body) {
    var _this = this;
    return _asyncToGenerator(function* () {
      try {
        const form = new _formData.default();

        // Handle local files and remote files
        if (isUrl(body.file)) {
          // use file and file name from remote
          form.append('file', body.file, {
            filename: body.file.split('/').pop().split('#')[0].split('?')[0]
          });
        } else {
          // use the local file
          form.append('file', body.file || body.path);
        }
        form.append('purpose', 'dispute_evidence');
        const response = yield (0, _http.post)(_this.config.httpClient, `${_this.config.host}/files`, _objectSpread(_objectSpread({}, _this.config), {}, {
          formData: true
        }), _this.config.sk, form);
        return yield response.json;
      } catch (err) {
        const error = yield (0, _errors.determineError)(err);
        throw error;
      }
    })();
  }

  /**
   * Retrieve information about a file that was previously uploaded.
   *
   * @memberof Files
   * @param {string} fileId Files id.
   * @return {Promise<Object>} A promise to the files response.
   */
  getFile(fileId) {
    var _this2 = this;
    return _asyncToGenerator(function* () {
      try {
        const response = yield (0, _http.get)(_this2.config.httpClient, `${_this2.config.host}/files/${fileId}`, _this2.config, _this2.config.sk);
        return yield response.json;
      } catch (err) {
        const error = yield (0, _errors.determineError)(err);
        throw error;
      }
    })();
  }
}
exports.default = Files;
const isUrl = string => {
  let url;
  try {
    url = new URL(string);
  } catch (_) {
    return false;
  }
  return url.protocol === 'http:' || url.protocol === 'https:';
};
//# sourceMappingURL=files.js.map