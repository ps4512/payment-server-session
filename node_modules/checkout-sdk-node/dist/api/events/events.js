"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _errors = require("../../services/errors");
var _http = require("../../services/http");
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
/**
 * Class dealing with the /events endpoint
 *
 * @export
 * @class Events
 */
class Events {
  constructor(config) {
    this.config = config;
  }

  /**
   * Retrieve a list of event types grouped by their respective version that you can
   * configure on your webhooks.
   *
   * @memberof Events
   * @param {string} version Events Version.
   * @return {Promise<Object>} A promise to the request events response.
   */
  retrieveEventTypes(version) {
    var _this = this;
    return _asyncToGenerator(function* () {
      try {
        let url = `${_this.config.host}/event-types`;
        if (version) {
          url += `?version=${version}`;
        }
        const response = yield (0, _http.get)(_this.config.httpClient, url, _this.config, _this.config.sk);
        return yield response.json;
      } catch (err) {
        const error = yield (0, _errors.determineError)(err);
        throw error;
      }
    })();
  }

  /**
   * Retrieves events ordered by the event date in descending order (latest first).
   * Results can be paged by specifying the skip and limit query parameters.
   *
   * @memberof Events
   * @param {Object} body Events request body.
   * @return {Promise<Object>} A promise to the request events response.
   */
  retrieveEvents(body) {
    var _this2 = this;
    return _asyncToGenerator(function* () {
      try {
        let url = `${_this2.config.host}/events`;
        if (body) {
          const queryString = Object.keys(body).map(key => `${key}=${body[key]}`).join('&');
          url += `?${queryString}`;
        }
        const response = yield (0, _http.get)(_this2.config.httpClient, url, _this2.config, _this2.config.sk);
        return yield response.json;
      } catch (err) {
        const error = yield (0, _errors.determineError)(err);
        throw error;
      }
    })();
  }

  /**
   * Retrieves the event with the specified identifier string. The event data includes the full event
   * details, the schema of which will vary based on the type.
   *
   * @memberof Events
   * @param {string} eventId Event id.
   * @return {Promise<Object>} A promise to the request event response.
   */
  retrieveEvent(eventId) {
    var _this3 = this;
    return _asyncToGenerator(function* () {
      try {
        const response = yield (0, _http.get)(_this3.config.httpClient, `${_this3.config.host}/events/${eventId}`, _this3.config, _this3.config.sk);
        return yield response.json;
      } catch (err) {
        const error = yield (0, _errors.determineError)(err);
        throw error;
      }
    })();
  }

  /**
   * Retrieves the attempts for a specific event notification
   *
   * @memberof Events
   * @param {Object} body Event request body.
   * @return {Promise<Object>} A promise to the request event notifications response.
   */
  retrieveEventNotification(body) {
    var _this4 = this;
    return _asyncToGenerator(function* () {
      try {
        const response = yield (0, _http.get)(_this4.config.httpClient, `${_this4.config.host}/events/${body.eventId}/notifications/${body.notificationId}`, _this4.config, _this4.config.sk);
        return yield response.json;
      } catch (err) {
        const error = yield (0, _errors.determineError)(err);
        throw error;
      }
    })();
  }

  /**
   * Retries a specific webhook notification for the given event
   *
   * @memberof Events
   * @param {Object} body Event request body.
   * @return {Promise<Object>} A promise to the retry event response.
   */
  retry(body) {
    var _this5 = this;
    return _asyncToGenerator(function* () {
      try {
        const response = yield (0, _http.post)(_this5.config.httpClient, `${_this5.config.host}/events/${body.eventId}/webhooks/${body.webhookId}/retry`, _this5.config, _this5.config.sk);
        return yield response.json;
      } catch (err) {
        const error = yield (0, _errors.determineError)(err);
        throw error;
      }
    })();
  }

  /**
   * Retries all webhook notifications configured for the specified event
   *
   * @memberof Events
   * @param {string} eventId Event id.
   * @return {Promise<Object>} A promise to the retry events response.
   */
  retryAll(eventId) {
    var _this6 = this;
    return _asyncToGenerator(function* () {
      try {
        const response = yield (0, _http.post)(_this6.config.httpClient, `${_this6.config.host}/events/${eventId}/webhooks/retry`, _this6.config, _this6.config.sk);
        return yield response.json;
      } catch (err) {
        const error = yield (0, _errors.determineError)(err);
        throw error;
      }
    })();
  }
}
exports.default = Events;
//# sourceMappingURL=events.js.map