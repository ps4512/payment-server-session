{"version":3,"file":"events.js","names":["_errors","require","_http","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","done","Promise","then","_asyncToGenerator","fn","self","args","arguments","apply","err","undefined","Events","constructor","config","retrieveEventTypes","version","_this","url","host","response","get","httpClient","sk","json","determineError","retrieveEvents","body","_this2","queryString","Object","keys","map","join","retrieveEvent","eventId","_this3","retrieveEventNotification","_this4","notificationId","retry","_this5","post","webhookId","retryAll","_this6","exports","default"],"sources":["../../../src/api/events/events.js"],"sourcesContent":["import { determineError } from '../../services/errors';\r\nimport { get, post } from '../../services/http';\r\n\r\n/**\r\n * Class dealing with the /events endpoint\r\n *\r\n * @export\r\n * @class Events\r\n */\r\nexport default class Events {\r\n    constructor(config) {\r\n        this.config = config;\r\n    }\r\n\r\n    /**\r\n     * Retrieve a list of event types grouped by their respective version that you can\r\n     * configure on your webhooks.\r\n     *\r\n     * @memberof Events\r\n     * @param {string} version Events Version.\r\n     * @return {Promise<Object>} A promise to the request events response.\r\n     */\r\n    async retrieveEventTypes(version) {\r\n        try {\r\n            let url = `${this.config.host}/event-types`;\r\n            if (version) {\r\n                url += `?version=${version}`;\r\n            }\r\n            const response = await get(\r\n                this.config.httpClient, \r\n                url, \r\n                this.config, \r\n                this.config.sk\r\n            );\r\n            return await response.json;\r\n        } catch (err) {\r\n            const error = await determineError(err);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Retrieves events ordered by the event date in descending order (latest first).\r\n     * Results can be paged by specifying the skip and limit query parameters.\r\n     *\r\n     * @memberof Events\r\n     * @param {Object} body Events request body.\r\n     * @return {Promise<Object>} A promise to the request events response.\r\n     */\r\n    async retrieveEvents(body) {\r\n        try {\r\n            let url = `${this.config.host}/events`;\r\n\r\n            if (body) {\r\n                const queryString = Object.keys(body)\r\n                    .map((key) => `${key}=${body[key]}`)\r\n                    .join('&');\r\n                url += `?${queryString}`;\r\n            }\r\n\r\n            const response = await get(this.config.httpClient, url, this.config, this.config.sk);\r\n            return await response.json;\r\n        } catch (err) {\r\n            const error = await determineError(err);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Retrieves the event with the specified identifier string. The event data includes the full event\r\n     * details, the schema of which will vary based on the type.\r\n     *\r\n     * @memberof Events\r\n     * @param {string} eventId Event id.\r\n     * @return {Promise<Object>} A promise to the request event response.\r\n     */\r\n    async retrieveEvent(eventId) {\r\n        try {\r\n            const response = await get(\r\n                this.config.httpClient,\r\n                `${this.config.host}/events/${eventId}`,\r\n                this.config,\r\n                this.config.sk\r\n            );\r\n            return await response.json;\r\n        } catch (err) {\r\n            const error = await determineError(err);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Retrieves the attempts for a specific event notification\r\n     *\r\n     * @memberof Events\r\n     * @param {Object} body Event request body.\r\n     * @return {Promise<Object>} A promise to the request event notifications response.\r\n     */\r\n    async retrieveEventNotification(body) {\r\n        try {\r\n            const response = await get(\r\n                this.config.httpClient,\r\n                `${this.config.host}/events/${body.eventId}/notifications/${body.notificationId}`,\r\n                this.config,\r\n                this.config.sk\r\n            );\r\n            return await response.json;\r\n        } catch (err) {\r\n            const error = await determineError(err);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Retries a specific webhook notification for the given event\r\n     *\r\n     * @memberof Events\r\n     * @param {Object} body Event request body.\r\n     * @return {Promise<Object>} A promise to the retry event response.\r\n     */\r\n    async retry(body) {\r\n        try {\r\n            const response = await post(\r\n                this.config.httpClient,\r\n                `${this.config.host}/events/${body.eventId}/webhooks/${body.webhookId}/retry`,\r\n                this.config,\r\n                this.config.sk\r\n            );\r\n            return await response.json;\r\n        } catch (err) {\r\n            const error = await determineError(err);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Retries all webhook notifications configured for the specified event\r\n     *\r\n     * @memberof Events\r\n     * @param {string} eventId Event id.\r\n     * @return {Promise<Object>} A promise to the retry events response.\r\n     */\r\n    async retryAll(eventId) {\r\n        try {\r\n            const response = await post(\r\n                this.config.httpClient,\r\n                `${this.config.host}/events/${eventId}/webhooks/retry`,\r\n                this.config,\r\n                this.config.sk\r\n            );\r\n            return await response.json;\r\n        } catch (err) {\r\n            const error = await determineError(err);\r\n            throw error;\r\n        }\r\n    }\r\n}\r\n"],"mappings":"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"}