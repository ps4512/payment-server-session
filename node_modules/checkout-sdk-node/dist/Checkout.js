"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var CONFIG = _interopRequireWildcard(require("./config"));
var ENDPOINTS = _interopRequireWildcard(require("./index"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
const determineHost = (key, options) => {
  // If specified, use the custom host
  if (options && options.host) {
    return options.host;
  }

  // Priority 1: oAuth environment vars
  if (process.env.CKO_SECRET) {
    if (process.env.CKO_ENVIRONMENT && process.env.CKO_ENVIRONMENT.toLowerCase().trim() === 'prod' || process.env.CKO_ENVIRONMENT && process.env.CKO_ENVIRONMENT.toLowerCase().trim() === 'production' || process.env.CKO_ENVIRONMENT && process.env.CKO_ENVIRONMENT.toLowerCase().trim() === 'live') {
      return CONFIG.LIVE_BASE_URL;
    }
    return CONFIG.SANDBOX_BASE_URL;
  }
  // Priority 2: oAuth declared vars
  if (options && options.client) {
    if (options.environment && options.environment.toLowerCase().trim() === 'prod' || options.environment && options.environment.toLowerCase().trim() === 'production' || options.environment && options.environment.toLowerCase().trim() === 'live') {
      return CONFIG.LIVE_BASE_URL;
    }
    return CONFIG.SANDBOX_BASE_URL;
  }

  // Priority 3: MBC or NAS static keys
  if (key.startsWith('Bearer')) {
    // eslint-disable-next-line no-param-reassign
    key = key.replace('Bearer', '').trim();
  }
  return CONFIG.MBC_LIVE_SECRET_KEY_REGEX.test(key) || CONFIG.NAS_LIVE_SECRET_KEY_REGEX.test(key) ? CONFIG.LIVE_BASE_URL : CONFIG.SANDBOX_BASE_URL;
};
const determineSecretKey = key => {
  // Unless specified, check environment variables for the key
  let authKey = !key ? process.env.CKO_SECRET_KEY || '' : key;

  // In case of NAS static keys, append the Bearer prefix
  if (CONFIG.NAS_LIVE_SECRET_KEY_REGEX.test(authKey) || CONFIG.NAS_SANDBOX_SECRET_KEY_REGEX.test(authKey)) {
    authKey = authKey.startsWith('Bearer') || authKey.startsWith('bearer') ? authKey : `Bearer ${authKey}`;
  }
  return authKey;
};
const determinePublicKey = options => {
  // Unless specified, check environment variables for the key
  let pk;
  if (options && options.pk) {
    pk = options.pk;
  } else {
    pk = process.env.CKO_PUBLIC_KEY || '';
  }
  return pk;
};

/**
 * Main Checkout.com SDK class
 *
 * @export
 * @class Checkout
 */
class Checkout {
  /**
   * Creates an instance of Checkout.com's SDK.
   *
   * Determines the environment based on the key
   *
   * @constructor
   * @param {string} [key] Secret Key /^(sk)
   * @param {Object}  [options] Configuration options
   * @memberof Payments
   */
  constructor(key, options) {
    let auth;
    if (process.env.CKO_SECRET) {
      // For NAS with environment vars
      auth = {
        secret: process.env.CKO_SECRET,
        client: process.env.CKO_CLIENT,
        scope: process.env.CKO_SCOPE || 'gateway',
        host: determineHost(null, options),
        access: null
      };
    } else if (process.env.CKO_SECRET_KEY) {
      // For MBC or NAS with static keys from environment vars
      auth = {
        sk: determineSecretKey(process.env.CKO_SECRET_KEY),
        pk: determinePublicKey(process.env.CKO_PUBLIC_KEY),
        host: determineHost(determineSecretKey(key), options)
      };
    } else if (options && options.client) {
      // For NAS with declared vars
      auth = {
        secret: key,
        pk: determinePublicKey(options),
        client: options.client,
        scope: options.scope || 'gateway',
        host: determineHost(null, options),
        access: null
      };
    } else {
      // For MBC or NAS with static keys with declared vars
      auth = {
        sk: determineSecretKey(key),
        pk: determinePublicKey(options),
        host: determineHost(determineSecretKey(key), options)
      };
    }
    this.config = _objectSpread(_objectSpread({}, auth), {}, {
      timeout: options && options.timeout ? options.timeout : CONFIG.DEFAULT_TIMEOUT,
      agent: options && options.agent ? options.agent : undefined,
      headers: options && options.headers ? options.headers : {},
      access: undefined,
      httpClient: options && options.httpClient ? options.httpClient : undefined
    });
    this.payments = new ENDPOINTS.Payments(this.config);
    this.sources = new ENDPOINTS.Sources(this.config);
    this.tokens = new ENDPOINTS.Tokens(this.config);
    this.instruments = new ENDPOINTS.Instruments(this.config);
    this.webhooks = new ENDPOINTS.Webhooks(this.config);
    this.events = new ENDPOINTS.Events(this.config);
    this.disputes = new ENDPOINTS.Disputes(this.config);
    this.files = new ENDPOINTS.Files(this.config);
    this.reconciliation = new ENDPOINTS.Reconciliation(this.config);
    this.customers = new ENDPOINTS.Customers(this.config);
    this.hostedPayments = new ENDPOINTS.HostedPayments(this.config);
    this.giropay = new ENDPOINTS.Giropay(this.config);
    this.ideal = new ENDPOINTS.Ideal(this.config);
    this.fawry = new ENDPOINTS.Fawry(this.config);
    this.pagoFacil = new ENDPOINTS.PagoFacil(this.config);
    this.rapipago = new ENDPOINTS.Rapipago(this.config);
    this.boleto = new ENDPOINTS.Boleto(this.config);
    this.baloto = new ENDPOINTS.Baloto(this.config);
    this.oxxo = new ENDPOINTS.Oxxo(this.config);
    this.klarna = new ENDPOINTS.Klarna(this.config);
    this.sepa = new ENDPOINTS.Sepa(this.config);
    this.paymentLinks = new ENDPOINTS.PaymentLinks(this.config);
    this.risk = new ENDPOINTS.Risk(this.config);
    this.access = new ENDPOINTS.Access(this.config);
    this.forex = new ENDPOINTS.Forex(this.config);
    this.applePay = new ENDPOINTS.ApplePay(this.config);
    this.sessions = new ENDPOINTS.Sessions(this.config);
    this.workflows = new ENDPOINTS.Workflows(this.config);
    this.platforms = new ENDPOINTS.Platforms(this.config);
    this.transfers = new ENDPOINTS.Transfers(this.config);
    this.balances = new ENDPOINTS.Balances(this.config);
    this.cardMetadata = new ENDPOINTS.CardMetadata(this.config);
    this.reports = new ENDPOINTS.Reports(this.config);
    this.financial = new ENDPOINTS.Financial(this.config);
    this.issuing = new ENDPOINTS.Issuing(this.config);
    this.paymentContexts = new ENDPOINTS.PaymentContexts(this.config);
    this.paymentSessions = new ENDPOINTS.PaymentSessions(this.config);
  }
}
exports.default = Checkout;
//# sourceMappingURL=Checkout.js.map